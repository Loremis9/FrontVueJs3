/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification. You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Password from '../model/Password';
import PublicMatchesDto from '../model/PublicMatchesDto';

/**
* PublicMatch service.
* @module api/PublicMatchApi
* @version 1.0.11
*/
export default class PublicMatchApi {

    /**
    * Constructs a new PublicMatchApi. 
    * @alias module:api/PublicMatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Récupérer tous les matchs des 7 derniers jours
     * Permet de récupérer tous les matchs disponibles.
     * @param {Object} opts Optional parameters
     * @param {module:model/Password} opts.password user password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PublicMatchesDto>} and HTTP response
     */
    getAllMatchesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['password'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PublicMatchesDto];
      return this.apiClient.callApi(
        '/publicmatches/getAllMatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer tous les matchs des 7 derniers jours
     * Permet de récupérer tous les matchs disponibles.
     * @param {Object} opts Optional parameters
     * @param {module:model/Password} opts.password user password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PublicMatchesDto>}
     */
    getAllMatches(opts) {
      return this.getAllMatchesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer un match terminer
     * Permet de récupérer les détails des matchs terminer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PublicMatchesDto>} and HTTP response
     */
    getMatchTerminateWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicMatchesDto];
      return this.apiClient.callApi(
        '/publicmatches/terminer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer un match terminer
     * Permet de récupérer les détails des matchs terminer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PublicMatchesDto>}
     */
    getMatchTerminate() {
      return this.getMatchTerminateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * récupère tous les matchs en cours
     * Permet de récupérer tous les matchs en cours
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PublicMatchesDto>} and HTTP response
     */
    getMatchliveWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicMatchesDto];
      return this.apiClient.callApi(
        '/publicmatches/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * récupère tous les matchs en cours
     * Permet de récupérer tous les matchs en cours
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PublicMatchesDto>}
     */
    getMatchlive() {
      return this.getMatchliveWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

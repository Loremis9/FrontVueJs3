/**
 * Swagger SportApplicatioh - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification. You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateEquipeAdverseDto from '../model/CreateEquipeAdverseDto';
import EquipeAdverseDto from '../model/EquipeAdverseDto';
import UpdateEquipeAdverseDto from '../model/UpdateEquipeAdverseDto';

/**
* EquipeAdverse service.
* @module api/EquipeAdverseApi
* @version 1.0.11
*/
export default class EquipeAdverseApi {

    /**
    * Constructs a new EquipeAdverseApi. 
    * @alias module:api/EquipeAdverseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * crée une nouvelle équipe
     * crée une nouvelle équipe
     * @param {module:model/CreateEquipeAdverseDto} createEquipeAdverseDto Create an new Team
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EquipeAdverseDto} and HTTP response
     */
    createTeamAdverseWithHttpInfo(createEquipeAdverseDto) {
      let postBody = createEquipeAdverseDto;
      // verify the required parameter 'createEquipeAdverseDto' is set
      if (createEquipeAdverseDto === undefined || createEquipeAdverseDto === null) {
        throw new Error("Missing the required parameter 'createEquipeAdverseDto' when calling createTeamAdverse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sport_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EquipeAdverseDto;
      return this.apiClient.callApi(
        '/EquipeAdverse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * crée une nouvelle équipe
     * crée une nouvelle équipe
     * @param {module:model/CreateEquipeAdverseDto} createEquipeAdverseDto Create an new Team
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EquipeAdverseDto}
     */
    createTeamAdverse(createEquipeAdverseDto) {
      return this.createTeamAdverseWithHttpInfo(createEquipeAdverseDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Supprimer une équipe avec son id
     * @param {Number} id The id that needs to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTeamAdverseWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTeamAdverse");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sport_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/EquipeAdverse/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Supprimer une équipe avec son id
     * @param {Number} id The id that needs to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTeamAdverse(id) {
      return this.deleteTeamAdverseWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer une équipe par son id
     * @param {Number} id The id that needs to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EquipeAdverseDto} and HTTP response
     */
    getTeamAdverseByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeamAdverseById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sport_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EquipeAdverseDto;
      return this.apiClient.callApi(
        '/EquipeAdverse/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer une équipe par son id
     * @param {Number} id The id that needs to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EquipeAdverseDto}
     */
    getTeamAdverseById(id) {
      return this.getTeamAdverseByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer une equipe adverse par son nom
     * @param {String} name The name that needs to be get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EquipeAdverseDto} and HTTP response
     */
    getTeamAdverseByNameWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getTeamAdverseByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sport_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EquipeAdverseDto;
      return this.apiClient.callApi(
        '/EquipeAdverse/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer une equipe adverse par son nom
     * @param {String} name The name that needs to be get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EquipeAdverseDto}
     */
    getTeamAdverseByName(name) {
      return this.getTeamAdverseByNameWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update une équipe existante
     * update une équipe existante
     * @param {Number} id The id that needs to be deleted
     * @param {module:model/UpdateEquipeAdverseDto} updateEquipeAdverseDto Create an new Team
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EquipeAdverseDto} and HTTP response
     */
    updateTeamAdverseWithHttpInfo(id, updateEquipeAdverseDto) {
      let postBody = updateEquipeAdverseDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTeamAdverse");
      }
      // verify the required parameter 'updateEquipeAdverseDto' is set
      if (updateEquipeAdverseDto === undefined || updateEquipeAdverseDto === null) {
        throw new Error("Missing the required parameter 'updateEquipeAdverseDto' when calling updateTeamAdverse");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sport_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EquipeAdverseDto;
      return this.apiClient.callApi(
        '/EquipeAdverse/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update une équipe existante
     * update une équipe existante
     * @param {Number} id The id that needs to be deleted
     * @param {module:model/UpdateEquipeAdverseDto} updateEquipeAdverseDto Create an new Team
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EquipeAdverseDto}
     */
    updateTeamAdverse(id, updateEquipeAdverseDto) {
      return this.updateTeamAdverseWithHttpInfo(id, updateEquipeAdverseDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

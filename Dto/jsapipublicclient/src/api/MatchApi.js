/**
 * Swagger SportApplicatioh - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification. You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMatchesDto from '../model/CreateMatchesDto';
import MatchesDto from '../model/MatchesDto';
import MatchesUpdateDto from '../model/MatchesUpdateDto';

/**
* Match service.
* @module api/MatchApi
* @version 1.0.11
*/
export default class MatchApi {

    /**
    * Constructs a new MatchApi. 
    * @alias module:api/MatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Créer un nouveau match
     * Permet de créer un nouveau match avec les détails fournis.
     * @param {module:model/CreateMatchesDto} createMatchesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MatchesDto} and HTTP response
     */
    createMatchWithHttpInfo(createMatchesDto) {
      let postBody = createMatchesDto;
      // verify the required parameter 'createMatchesDto' is set
      if (createMatchesDto === undefined || createMatchesDto === null) {
        throw new Error("Missing the required parameter 'createMatchesDto' when calling createMatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MatchesDto;
      return this.apiClient.callApi(
        '/matches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Créer un nouveau match
     * Permet de créer un nouveau match avec les détails fournis.
     * @param {module:model/CreateMatchesDto} createMatchesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MatchesDto}
     */
    createMatch(createMatchesDto) {
      return this.createMatchWithHttpInfo(createMatchesDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer tous les matchs
     * Permet de récupérer tous les matchs disponibles.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MatchesDto>} and HTTP response
     */
    getAllMatchesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MatchesDto];
      return this.apiClient.callApi(
        '/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer tous les matchs
     * Permet de récupérer tous les matchs disponibles.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MatchesDto>}
     */
    getAllMatches() {
      return this.getAllMatchesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer un match par ID
     * Permet de récupérer les détails d'un match spécifique en fonction de son ID.
     * @param {String} id ID du match à récupérer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MatchesDto} and HTTP response
     */
    getMatchByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMatchById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatchesDto;
      return this.apiClient.callApi(
        '/matches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer un match par ID
     * Permet de récupérer les détails d'un match spécifique en fonction de son ID.
     * @param {String} id ID du match à récupérer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MatchesDto}
     */
    getMatchById(id) {
      return this.getMatchByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * rajouter des informations lié au match
     * Permet de créer une update du match avec les détails fournis.
     * @param {String} id ID du match à récupérer
     * @param {module:model/MatchesUpdateDto} matchesUpdateDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    revisioneMatchWithHttpInfo(id, matchesUpdateDto) {
      let postBody = matchesUpdateDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling revisioneMatch");
      }
      // verify the required parameter 'matchesUpdateDto' is set
      if (matchesUpdateDto === undefined || matchesUpdateDto === null) {
        throw new Error("Missing the required parameter 'matchesUpdateDto' when calling revisioneMatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/matches/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * rajouter des informations lié au match
     * Permet de créer une update du match avec les détails fournis.
     * @param {String} id ID du match à récupérer
     * @param {module:model/MatchesUpdateDto} matchesUpdateDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    revisioneMatch(id, matchesUpdateDto) {
      return this.revisioneMatchWithHttpInfo(id, matchesUpdateDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * modifier les information un  match
     * modifier les information un  match
     * @param {String} id ID du match à récupérer
     * @param {module:model/CreateMatchesDto} createMatchesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MatchesDto} and HTTP response
     */
    updateMatchinformationsWithHttpInfo(id, createMatchesDto) {
      let postBody = createMatchesDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMatchinformations");
      }
      // verify the required parameter 'createMatchesDto' is set
      if (createMatchesDto === undefined || createMatchesDto === null) {
        throw new Error("Missing the required parameter 'createMatchesDto' when calling updateMatchinformations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MatchesDto;
      return this.apiClient.callApi(
        '/matches/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * modifier les information un  match
     * modifier les information un  match
     * @param {String} id ID du match à récupérer
     * @param {module:model/CreateMatchesDto} createMatchesDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MatchesDto}
     */
    updateMatchinformations(id, createMatchesDto) {
      return this.updateMatchinformationsWithHttpInfo(id, createMatchesDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

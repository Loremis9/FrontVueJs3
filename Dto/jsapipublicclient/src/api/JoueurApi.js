/**
 * Swagger SportApplicatioh - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification. You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateJoueurDto from '../model/CreateJoueurDto';
import JoueurDto from '../model/JoueurDto';

/**
* Joueur service.
* @module api/JoueurApi
* @version 1.0.11
*/
export default class JoueurApi {

    /**
    * Constructs a new JoueurApi. 
    * @alias module:api/JoueurApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * crée un joueur
     * Crée un joueur
     * @param {module:model/CreateJoueurDto} createJoueurDto Crée un nouveau joueur
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JoueurDto} and HTTP response
     */
    createPlayerWithHttpInfo(createJoueurDto) {
      let postBody = createJoueurDto;
      // verify the required parameter 'createJoueurDto' is set
      if (createJoueurDto === undefined || createJoueurDto === null) {
        throw new Error("Missing the required parameter 'createJoueurDto' when calling createPlayer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = JoueurDto;
      return this.apiClient.callApi(
        '/Joueur', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * crée un joueur
     * Crée un joueur
     * @param {module:model/CreateJoueurDto} createJoueurDto Crée un nouveau joueur
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JoueurDto}
     */
    createPlayer(createJoueurDto) {
      return this.createPlayerWithHttpInfo(createJoueurDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * supprimer un joueur par son id
     * 
     * @param {Number} id id of player
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JoueurDto} and HTTP response
     */
    deletePlayerByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePlayerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JoueurDto;
      return this.apiClient.callApi(
        '/Joueur/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * supprimer un joueur par son id
     * 
     * @param {Number} id id of player
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JoueurDto}
     */
    deletePlayerById(id) {
      return this.deletePlayerByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer tous les joueurs sans équipe
     * récupère tous les joueurs sans équipe
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/JoueurDto>} and HTTP response
     */
    getAllPlayerWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JoueurDto];
      return this.apiClient.callApi(
        '/Joueur', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer tous les joueurs sans équipe
     * récupère tous les joueurs sans équipe
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/JoueurDto>}
     */
    getAllPlayer() {
      return this.getAllPlayerWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer un joueur par son nom
     * @param {String} name The name of the player to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JoueurDto} and HTTP response
     */
    getPlayerByNameWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPlayerByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JoueurDto;
      return this.apiClient.callApi(
        '/Joueur/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer un joueur par son nom
     * @param {String} name The name of the player to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JoueurDto}
     */
    getPlayerByName(name) {
      return this.getPlayerByNameWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Récupérer un joueur par son id
     * 
     * @param {Number} id id of player
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JoueurDto} and HTTP response
     */
    getPlayerbyIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlayerbyId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = JoueurDto;
      return this.apiClient.callApi(
        '/Joueur/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Récupérer un joueur par son id
     * 
     * @param {Number} id id of player
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JoueurDto}
     */
    getPlayerbyId(id) {
      return this.getPlayerbyIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update un Joueur existant
     * update une Joueur existant
     * @param {Number} id The id that needs to be deleted
     * @param {module:model/JoueurDto} joueurDto update a player
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JoueurDto} and HTTP response
     */
    updatePlayerWithHttpInfo(id, joueurDto) {
      let postBody = joueurDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePlayer");
      }
      // verify the required parameter 'joueurDto' is set
      if (joueurDto === undefined || joueurDto === null) {
        throw new Error("Missing the required parameter 'joueurDto' when calling updatePlayer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JoueurDto;
      return this.apiClient.callApi(
        '/Joueur/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update un Joueur existant
     * update une Joueur existant
     * @param {Number} id The id that needs to be deleted
     * @param {module:model/JoueurDto} joueurDto update a player
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JoueurDto}
     */
    updatePlayer(id, joueurDto) {
      return this.updatePlayerWithHttpInfo(id, joueurDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
